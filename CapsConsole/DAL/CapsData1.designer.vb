'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="CapsDev")>  _
Partial Public Class CapsDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCap_Category_Int(instance As Cap_Category_Int)
    End Sub
  Partial Private Sub UpdateCap_Category_Int(instance As Cap_Category_Int)
    End Sub
  Partial Private Sub DeleteCap_Category_Int(instance As Cap_Category_Int)
    End Sub
  Partial Private Sub InsertCap_Keyword_Int(instance As Cap_Keyword_Int)
    End Sub
  Partial Private Sub UpdateCap_Keyword_Int(instance As Cap_Keyword_Int)
    End Sub
  Partial Private Sub DeleteCap_Keyword_Int(instance As Cap_Keyword_Int)
    End Sub
  Partial Private Sub InsertCapType(instance As CapType)
    End Sub
  Partial Private Sub UpdateCapType(instance As CapType)
    End Sub
  Partial Private Sub DeleteCapType(instance As CapType)
    End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertCompany(instance As Company)
    End Sub
  Partial Private Sub UpdateCompany(instance As Company)
    End Sub
  Partial Private Sub DeleteCompany(instance As Company)
    End Sub
  Partial Private Sub InsertKeyword(instance As Keyword)
    End Sub
  Partial Private Sub UpdateKeyword(instance As Keyword)
    End Sub
  Partial Private Sub DeleteKeyword(instance As Keyword)
    End Sub
  Partial Private Sub InsertMainType(instance As MainType)
    End Sub
  Partial Private Sub UpdateMainType(instance As MainType)
    End Sub
  Partial Private Sub DeleteMainType(instance As MainType)
    End Sub
  Partial Private Sub InsertMaterial(instance As Material)
    End Sub
  Partial Private Sub UpdateMaterial(instance As Material)
    End Sub
  Partial Private Sub DeleteMaterial(instance As Material)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertProductType(instance As ProductType)
    End Sub
  Partial Private Sub UpdateProductType(instance As ProductType)
    End Sub
  Partial Private Sub DeleteProductType(instance As ProductType)
    End Sub
  Partial Private Sub InsertStorage(instance As Storage)
    End Sub
  Partial Private Sub UpdateStorage(instance As Storage)
    End Sub
  Partial Private Sub DeleteStorage(instance As Storage)
    End Sub
  Partial Private Sub InsertStorageType(instance As StorageType)
    End Sub
  Partial Private Sub UpdateStorageType(instance As StorageType)
    End Sub
  Partial Private Sub DeleteStorageType(instance As StorageType)
    End Sub
  Partial Private Sub InsertCap(instance As Cap)
    End Sub
  Partial Private Sub UpdateCap(instance As Cap)
    End Sub
  Partial Private Sub DeleteCap(instance As Cap)
    End Sub
  Partial Private Sub InsertShape(instance As Shape)
    End Sub
  Partial Private Sub UpdateShape(instance As Shape)
    End Sub
  Partial Private Sub DeleteShape(instance As Shape)
    End Sub
  Partial Private Sub InsertImage(instance As Image)
    End Sub
  Partial Private Sub UpdateImage(instance As Image)
    End Sub
  Partial Private Sub DeleteImage(instance As Image)
    End Sub
  Partial Private Sub InsertTarget(instance As Target)
    End Sub
  Partial Private Sub UpdateTarget(instance As Target)
    End Sub
  Partial Private Sub DeleteTarget(instance As Target)
    End Sub
  Partial Private Sub InsertCapInstance(instance As CapInstance)
    End Sub
  Partial Private Sub UpdateCapInstance(instance As CapInstance)
    End Sub
  Partial Private Sub DeleteCapInstance(instance As CapInstance)
    End Sub
  Partial Private Sub InsertISO_3166_1(instance As ISO_3166_1)
    End Sub
  Partial Private Sub UpdateISO_3166_1(instance As ISO_3166_1)
    End Sub
  Partial Private Sub DeleteISO_3166_1(instance As ISO_3166_1)
    End Sub
  Partial Private Sub InsertCapSign(instance As CapSign)
    End Sub
  Partial Private Sub UpdateCapSign(instance As CapSign)
    End Sub
  Partial Private Sub DeleteCapSign(instance As CapSign)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Caps.Console.MySettings.Default.CapsDevConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cap_Category_Ints() As System.Data.Linq.Table(Of Cap_Category_Int)
		Get
			Return Me.GetTable(Of Cap_Category_Int)
		End Get
	End Property
	
	Public ReadOnly Property Cap_Keyword_Ints() As System.Data.Linq.Table(Of Cap_Keyword_Int)
		Get
			Return Me.GetTable(Of Cap_Keyword_Int)
		End Get
	End Property
	
	Public ReadOnly Property CapTypes() As System.Data.Linq.Table(Of CapType)
		Get
			Return Me.GetTable(Of CapType)
		End Get
	End Property
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property Companies() As System.Data.Linq.Table(Of Company)
		Get
			Return Me.GetTable(Of Company)
		End Get
	End Property
	
	Public ReadOnly Property Keywords() As System.Data.Linq.Table(Of Keyword)
		Get
			Return Me.GetTable(Of Keyword)
		End Get
	End Property
	
	Public ReadOnly Property MainTypes() As System.Data.Linq.Table(Of MainType)
		Get
			Return Me.GetTable(Of MainType)
		End Get
	End Property
	
	Public ReadOnly Property Materials() As System.Data.Linq.Table(Of Material)
		Get
			Return Me.GetTable(Of Material)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property ProductTypes() As System.Data.Linq.Table(Of ProductType)
		Get
			Return Me.GetTable(Of ProductType)
		End Get
	End Property
	
	Public ReadOnly Property Storages() As System.Data.Linq.Table(Of Storage)
		Get
			Return Me.GetTable(Of Storage)
		End Get
	End Property
	
	Public ReadOnly Property StorageTypes() As System.Data.Linq.Table(Of StorageType)
		Get
			Return Me.GetTable(Of StorageType)
		End Get
	End Property
	
	Public ReadOnly Property Caps() As System.Data.Linq.Table(Of Cap)
		Get
			Return Me.GetTable(Of Cap)
		End Get
	End Property
	
	Public ReadOnly Property Shapes() As System.Data.Linq.Table(Of Shape)
		Get
			Return Me.GetTable(Of Shape)
		End Get
	End Property
	
	Public ReadOnly Property Images() As System.Data.Linq.Table(Of Image)
		Get
			Return Me.GetTable(Of Image)
		End Get
	End Property
	
	Public ReadOnly Property Targets() As System.Data.Linq.Table(Of Target)
		Get
			Return Me.GetTable(Of Target)
		End Get
	End Property
	
	Public ReadOnly Property CapInstances() As System.Data.Linq.Table(Of CapInstance)
		Get
			Return Me.GetTable(Of CapInstance)
		End Get
	End Property
	
	Public ReadOnly Property ISO_3166_1s() As System.Data.Linq.Table(Of ISO_3166_1)
		Get
			Return Me.GetTable(Of ISO_3166_1)
		End Get
	End Property
	
	Public ReadOnly Property CapSigns() As System.Data.Linq.Table(Of CapSign)
		Get
			Return Me.GetTable(Of CapSign)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.GetDatabaseVersion", IsComposable:=true)>  _
	Public Function GetDatabaseVersion() As String
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,String)
	End Function
	
	<FunctionAttribute(IsComposable:=true)>  _
	Public Function NewID() As System.Nullable(Of System.Guid)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,System.Nullable(Of System.Guid))
	End Function
End Class

<Table(Name:="dbo.Cap_Category_Int")>  _
Partial Public Class Cap_Category_Int
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapID As Integer = CType(Nothing, Integer)
	
	Private _CategoryID As Integer = CType(Nothing, Integer)
	
	Private _Category As EntityRef(Of Category)
	
	Private _Cap As EntityRef(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Category = CType(Nothing, EntityRef(Of Category))
		Me._Cap = CType(Nothing, EntityRef(Of Cap))
		OnCreated
	End Sub
	
	<Column(Storage:="_CapID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CapID() As Integer
		Get
			Return Me._CapID
		End Get
	End Property
	
	<Column(Storage:="_CategoryID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
	End Property
	
	<Association(Name:="Category_Cap_Category_Int", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.Cap_Category_Ints.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cap_Category_Ints.Add(Me)
					Me._CategoryID = value.CategoryID
				Else
					Me._CategoryID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	<Association(Name:="Cap_Cap_Category_Int", Storage:="_Cap", ThisKey:="CapID", OtherKey:="CapID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Cap() As Cap
		Get
			Return Me._Cap.Entity
		End Get
		Set
			Dim previousValue As Cap = Me._Cap.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cap.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cap.Entity = Nothing
					previousValue.Cap_Category_Ints.Remove(Me)
				End If
				Me._Cap.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cap_Category_Ints.Add(Me)
					Me._CapID = value.CapID
				Else
					Me._CapID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cap")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Cap_Keyword_Int")>  _
Partial Public Class Cap_Keyword_Int
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapID As Integer = CType(Nothing, Integer)
	
	Private _KeywordID As Integer = CType(Nothing, Integer)
	
	Private _Keyword As EntityRef(Of Keyword)
	
	Private _Cap As EntityRef(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Keyword = CType(Nothing, EntityRef(Of Keyword))
		Me._Cap = CType(Nothing, EntityRef(Of Cap))
		OnCreated
	End Sub
	
	<Column(Storage:="_CapID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CapID() As Integer
		Get
			Return Me._CapID
		End Get
	End Property
	
	<Column(Storage:="_KeywordID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property KeywordID() As Integer
		Get
			Return Me._KeywordID
		End Get
	End Property
	
	<Association(Name:="Keyword_Cap_Keyword_Int", Storage:="_Keyword", ThisKey:="KeywordID", OtherKey:="KeywordID", IsForeignKey:=true)>  _
	Public Property Keyword() As Keyword
		Get
			Return Me._Keyword.Entity
		End Get
		Set
			Dim previousValue As Keyword = Me._Keyword.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Keyword.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Keyword.Entity = Nothing
					previousValue.Cap_Keyword_Ints.Remove(Me)
				End If
				Me._Keyword.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cap_Keyword_Ints.Add(Me)
					Me._KeywordID = value.KeywordID
				Else
					Me._KeywordID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Keyword")
			End If
		End Set
	End Property
	
	<Association(Name:="Cap_Cap_Keyword_Int", Storage:="_Cap", ThisKey:="CapID", OtherKey:="CapID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Cap() As Cap
		Get
			Return Me._Cap.Entity
		End Get
		Set
			Dim previousValue As Cap = Me._Cap.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cap.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cap.Entity = Nothing
					previousValue.Cap_Keyword_Ints.Remove(Me)
				End If
				Me._Cap.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cap_Keyword_Ints.Add(Me)
					Me._CapID = value.CapID
				Else
					Me._CapID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cap")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CapType")>  _
Partial Public Class CapType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapTypeID As Integer = CType(Nothing, Integer)
	
	Private _TypeName As String
	
	Private _ShapeID As Integer
	
	Private _Size As Integer
	
	Private _Size2 As System.Nullable(Of Integer)
	
	Private _Height As Integer
	
	Private _MaterialID As Integer
	
	Private _MainTypeID As Integer
	
	Private _Description As String
	
	Private _TargetID As System.Nullable(Of Integer)
	
	Private _Caps As EntitySet(Of Cap)
	
	Private _MainType As EntityRef(Of MainType)
	
	Private _Material As EntityRef(Of Material)
	
	Private _Shape As EntityRef(Of Shape)
	
	Private _Target As EntityRef(Of Target)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnShapeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShapeIDChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    Partial Private Sub OnSize2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSize2Changed()
    End Sub
    Partial Private Sub OnHeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnMaterialIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaterialIDChanged()
    End Sub
    Partial Private Sub OnMainTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMainTypeIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTargetIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTargetIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		Me._MainType = CType(Nothing, EntityRef(Of MainType))
		Me._Material = CType(Nothing, EntityRef(Of Material))
		Me._Shape = CType(Nothing, EntityRef(Of Shape))
		Me._Target = CType(Nothing, EntityRef(Of Target))
		OnCreated
	End Sub
	
	<Column(Storage:="_CapTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CapTypeID() As Integer
		Get
			Return Me._CapTypeID
		End Get
	End Property
	
	<Column(Storage:="_TypeName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TypeName() As String
		Get
			Return Me._TypeName
		End Get
		Set
			If (String.Equals(Me._TypeName, value) = false) Then
				Me.OnTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeName = value
				Me.SendPropertyChanged("TypeName")
				Me.OnTypeNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShapeID", DbType:="Int NOT NULL")>  _
	Public Property ShapeID() As Integer
		Get
			Return Me._ShapeID
		End Get
		Set
			If ((Me._ShapeID = value)  _
						= false) Then
				If Me._Shape.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnShapeIDChanging(value)
				Me.SendPropertyChanging
				Me._ShapeID = value
				Me.SendPropertyChanged("ShapeID")
				Me.OnShapeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size", DbType:="Int NOT NULL")>  _
	Public Property Size() As Integer
		Get
			Return Me._Size
		End Get
		Set
			If ((Me._Size = value)  _
						= false) Then
				Me.OnSizeChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size")
				Me.OnSizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size2", DbType:="Int")>  _
	Public Property Size2() As System.Nullable(Of Integer)
		Get
			Return Me._Size2
		End Get
		Set
			If (Me._Size2.Equals(value) = false) Then
				Me.OnSize2Changing(value)
				Me.SendPropertyChanging
				Me._Size2 = value
				Me.SendPropertyChanged("Size2")
				Me.OnSize2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Height", DbType:="Int NOT NULL")>  _
	Public Property Height() As Integer
		Get
			Return Me._Height
		End Get
		Set
			If ((Me._Height = value)  _
						= false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaterialID", DbType:="Int NOT NULL")>  _
	Public Property MaterialID() As Integer
		Get
			Return Me._MaterialID
		End Get
		Set
			If ((Me._MaterialID = value)  _
						= false) Then
				If Me._Material.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnMaterialIDChanging(value)
				Me.SendPropertyChanging
				Me._MaterialID = value
				Me.SendPropertyChanged("MaterialID")
				Me.OnMaterialIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MainTypeID", DbType:="Int NOT NULL")>  _
	Public Property MainTypeID() As Integer
		Get
			Return Me._MainTypeID
		End Get
		Set
			If ((Me._MainTypeID = value)  _
						= false) Then
				If Me._MainType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnMainTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MainTypeID = value
				Me.SendPropertyChanged("MainTypeID")
				Me.OnMainTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TargetID", DbType:="Int")>  _
	Public Property TargetID() As System.Nullable(Of Integer)
		Get
			Return Me._TargetID
		End Get
		Set
			If (Me._TargetID.Equals(value) = false) Then
				If Me._Target.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnTargetIDChanging(value)
				Me.SendPropertyChanging
				Me._TargetID = value
				Me.SendPropertyChanged("TargetID")
				Me.OnTargetIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CapType_Cap", Storage:="_Caps", ThisKey:="CapTypeID", OtherKey:="CapTypeID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	<Association(Name:="MainType_CapType", Storage:="_MainType", ThisKey:="MainTypeID", OtherKey:="MainTypeID", IsForeignKey:=true)>  _
	Public Property MainType() As MainType
		Get
			Return Me._MainType.Entity
		End Get
		Set
			Dim previousValue As MainType = Me._MainType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MainType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MainType.Entity = Nothing
					previousValue.CapTypes.Remove(Me)
				End If
				Me._MainType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapTypes.Add(Me)
					Me._MainTypeID = value.MainTypeID
				Else
					Me._MainTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MainType")
			End If
		End Set
	End Property
	
	<Association(Name:="Material_CapType", Storage:="_Material", ThisKey:="MaterialID", OtherKey:="MaterialID", IsForeignKey:=true)>  _
	Public Property Material() As Material
		Get
			Return Me._Material.Entity
		End Get
		Set
			Dim previousValue As Material = Me._Material.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Material.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Material.Entity = Nothing
					previousValue.CapTypes.Remove(Me)
				End If
				Me._Material.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapTypes.Add(Me)
					Me._MaterialID = value.MaterialID
				Else
					Me._MaterialID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Material")
			End If
		End Set
	End Property
	
	<Association(Name:="Shape_CapType", Storage:="_Shape", ThisKey:="ShapeID", OtherKey:="ShapeID", IsForeignKey:=true)>  _
	Public Property Shape() As Shape
		Get
			Return Me._Shape.Entity
		End Get
		Set
			Dim previousValue As Shape = Me._Shape.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Shape.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Shape.Entity = Nothing
					previousValue.CapTypes.Remove(Me)
				End If
				Me._Shape.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapTypes.Add(Me)
					Me._ShapeID = value.ShapeID
				Else
					Me._ShapeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Shape")
			End If
		End Set
	End Property
	
	<Association(Name:="Target_CapType", Storage:="_Target", ThisKey:="TargetID", OtherKey:="TargetID", IsForeignKey:=true)>  _
	Public Property Target() As Target
		Get
			Return Me._Target.Entity
		End Get
		Set
			Dim previousValue As Target = Me._Target.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Target.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Target.Entity = Nothing
					previousValue.CapTypes.Remove(Me)
				End If
				Me._Target.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapTypes.Add(Me)
					Me._TargetID = value.TargetID
				Else
					Me._TargetID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Target")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.CapType = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.CapType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Category")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer = CType(Nothing, Integer)
	
	Private _CategoryName As String
	
	Private _Description As String
	
	Private _Cap_Category_Ints As EntitySet(Of Cap_Category_Int)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cap_Category_Ints = New EntitySet(Of Cap_Category_Int)(AddressOf Me.attach_Cap_Category_Ints, AddressOf Me.detach_Cap_Category_Ints)
		OnCreated
	End Sub
	
	<Column(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
	End Property
	
	<Column(Storage:="_CategoryName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Category_Cap_Category_Int", Storage:="_Cap_Category_Ints", ThisKey:="CategoryID", OtherKey:="CategoryID")>  _
	Public Property Cap_Category_Ints() As EntitySet(Of Cap_Category_Int)
		Get
			Return Me._Cap_Category_Ints
		End Get
		Set
			Me._Cap_Category_Ints.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cap_Category_Ints(ByVal entity As Cap_Category_Int)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_Cap_Category_Ints(ByVal entity As Cap_Category_Int)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
End Class

<Table(Name:="dbo.Company")>  _
Partial Public Class Company
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CompanyID As Integer = CType(Nothing, Integer)
	
	Private _CompanyName As String
	
	Private _Description As String
	
	Private _Products As EntitySet(Of Product)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_CompanyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CompanyID() As Integer
		Get
			Return Me._CompanyID
		End Get
	End Property
	
	<Column(Storage:="_CompanyName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Company_Product", Storage:="_Products", ThisKey:="CompanyID", OtherKey:="CompanyID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Company_Cap", Storage:="_Caps", ThisKey:="CompanyID", OtherKey:="CompanyID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Company = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Company = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Company = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Company = Nothing
	End Sub
End Class

<Table(Name:="dbo.Keyword")>  _
Partial Public Class Keyword
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _KeywordID As Integer = CType(Nothing, Integer)
	
	Private _Keyword As String = CType(Nothing, String)
	
	Private _Cap_Keyword_Ints As EntitySet(Of Cap_Keyword_Int)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cap_Keyword_Ints = New EntitySet(Of Cap_Keyword_Int)(AddressOf Me.attach_Cap_Keyword_Ints, AddressOf Me.detach_Cap_Keyword_Ints)
		OnCreated
	End Sub
	
	<Column(Storage:="_KeywordID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property KeywordID() As Integer
		Get
			Return Me._KeywordID
		End Get
	End Property
	
	<Column(Storage:="_Keyword", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
	End Property
	
	<Association(Name:="Keyword_Cap_Keyword_Int", Storage:="_Cap_Keyword_Ints", ThisKey:="KeywordID", OtherKey:="KeywordID")>  _
	Public Property Cap_Keyword_Ints() As EntitySet(Of Cap_Keyword_Int)
		Get
			Return Me._Cap_Keyword_Ints
		End Get
		Set
			Me._Cap_Keyword_Ints.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cap_Keyword_Ints(ByVal entity As Cap_Keyword_Int)
		Me.SendPropertyChanging
		entity.Keyword = Me
	End Sub
	
	Private Sub detach_Cap_Keyword_Ints(ByVal entity As Cap_Keyword_Int)
		Me.SendPropertyChanging
		entity.Keyword = Nothing
	End Sub
End Class

<Table(Name:="dbo.MainType")>  _
Partial Public Class MainType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MainTypeID As Integer = CType(Nothing, Integer)
	
	Private _TypeName As String
	
	Private _Description As String
	
	Private _CapTypes As EntitySet(Of CapType)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CapTypes = New EntitySet(Of CapType)(AddressOf Me.attach_CapTypes, AddressOf Me.detach_CapTypes)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_MainTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property MainTypeID() As Integer
		Get
			Return Me._MainTypeID
		End Get
	End Property
	
	<Column(Storage:="_TypeName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TypeName() As String
		Get
			Return Me._TypeName
		End Get
		Set
			If (String.Equals(Me._TypeName, value) = false) Then
				Me.OnTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeName = value
				Me.SendPropertyChanged("TypeName")
				Me.OnTypeNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="MainType_CapType", Storage:="_CapTypes", ThisKey:="MainTypeID", OtherKey:="MainTypeID")>  _
	Public Property CapTypes() As EntitySet(Of CapType)
		Get
			Return Me._CapTypes
		End Get
		Set
			Me._CapTypes.Assign(value)
		End Set
	End Property
	
	<Association(Name:="MainType_Cap", Storage:="_Caps", ThisKey:="MainTypeID", OtherKey:="MainTypeID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.MainType = Me
	End Sub
	
	Private Sub detach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.MainType = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.MainType = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.MainType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Material")>  _
Partial Public Class Material
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaterialID As Integer = CType(Nothing, Integer)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _CapTypes As EntitySet(Of CapType)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CapTypes = New EntitySet(Of CapType)(AddressOf Me.attach_CapTypes, AddressOf Me.detach_CapTypes)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_MaterialID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property MaterialID() As Integer
		Get
			Return Me._MaterialID
		End Get
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Material_CapType", Storage:="_CapTypes", ThisKey:="MaterialID", OtherKey:="MaterialID")>  _
	Public Property CapTypes() As EntitySet(Of CapType)
		Get
			Return Me._CapTypes
		End Get
		Set
			Me._CapTypes.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Material_Cap", Storage:="_Caps", ThisKey:="MaterialID", OtherKey:="MaterialID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Material = Me
	End Sub
	
	Private Sub detach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Material = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Material = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Material = Nothing
	End Sub
End Class

<Table(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _ProductName As String
	
	Private _CompanyID As System.Nullable(Of Integer)
	
	Private _ProductTypeID As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _Caps As EntitySet(Of Cap)
	
	Private _Company As EntityRef(Of Company)
	
	Private _ProductType As EntityRef(Of ProductType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnCompanyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCompanyIDChanged()
    End Sub
    Partial Private Sub OnProductTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductTypeIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		Me._Company = CType(Nothing, EntityRef(Of Company))
		Me._ProductType = CType(Nothing, EntityRef(Of ProductType))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompanyID", DbType:="Int")>  _
	Public Property CompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._CompanyID
		End Get
		Set
			If (Me._CompanyID.Equals(value) = false) Then
				If Me._Company.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductTypeID", DbType:="Int")>  _
	Public Property ProductTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductTypeID
		End Get
		Set
			If (Me._ProductTypeID.Equals(value) = false) Then
				If Me._ProductType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductTypeID = value
				Me.SendPropertyChanged("ProductTypeID")
				Me.OnProductTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Product_Cap", Storage:="_Caps", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Company_Product", Storage:="_Company", ThisKey:="CompanyID", OtherKey:="CompanyID", IsForeignKey:=true)>  _
	Public Property Company() As Company
		Get
			Return Me._Company.Entity
		End Get
		Set
			Dim previousValue As Company = Me._Company.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Company.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Company.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._Company.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._CompanyID = value.CompanyID
				Else
					Me._CompanyID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Company")
			End If
		End Set
	End Property
	
	<Association(Name:="ProductType_Product", Storage:="_ProductType", ThisKey:="ProductTypeID", OtherKey:="ProductTypeID", IsForeignKey:=true)>  _
	Public Property ProductType() As ProductType
		Get
			Return Me._ProductType.Entity
		End Get
		Set
			Dim previousValue As ProductType = Me._ProductType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductType.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._ProductType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._ProductTypeID = value.ProductTypeID
				Else
					Me._ProductTypeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProductType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProductType")>  _
Partial Public Class ProductType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductTypeID As Integer = CType(Nothing, Integer)
	
	Private _ProductTypeName As String
	
	Private _Description As String
	
	Private _IsDrink As System.Nullable(Of Boolean)
	
	Private _IsAlcoholic As System.Nullable(Of Boolean)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductTypeNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIsDrinkChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDrinkChanged()
    End Sub
    Partial Private Sub OnIsAlcoholicChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlcoholicChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property ProductTypeID() As Integer
		Get
			Return Me._ProductTypeID
		End Get
	End Property
	
	<Column(Storage:="_ProductTypeName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductTypeName() As String
		Get
			Return Me._ProductTypeName
		End Get
		Set
			If (String.Equals(Me._ProductTypeName, value) = false) Then
				Me.OnProductTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductTypeName = value
				Me.SendPropertyChanged("ProductTypeName")
				Me.OnProductTypeNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsDrink", DbType:="Bit")>  _
	Public Property IsDrink() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDrink
		End Get
		Set
			If (Me._IsDrink.Equals(value) = false) Then
				Me.OnIsDrinkChanging(value)
				Me.SendPropertyChanging
				Me._IsDrink = value
				Me.SendPropertyChanged("IsDrink")
				Me.OnIsDrinkChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsAlcoholic", DbType:="Bit")>  _
	Public Property IsAlcoholic() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlcoholic
		End Get
		Set
			If (Me._IsAlcoholic.Equals(value) = false) Then
				Me.OnIsAlcoholicChanging(value)
				Me.SendPropertyChanging
				Me._IsAlcoholic = value
				Me.SendPropertyChanged("IsAlcoholic")
				Me.OnIsAlcoholicChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductType_Product", Storage:="_Products", ThisKey:="ProductTypeID", OtherKey:="ProductTypeID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProductType_Cap", Storage:="_Caps", ThisKey:="ProductTypeID", OtherKey:="ProductTypeID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductType = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductType = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.ProductType = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.ProductType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Storage")>  _
Partial Public Class Storage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StorageID As Integer = CType(Nothing, Integer)
	
	Private _StorageNumber As String
	
	Private _Description As String
	
	Private _StorageTypeID As Integer
	
	Private _Caps As EntitySet(Of Cap)
	
	Private _CapInstances As EntitySet(Of CapInstance)
	
	Private _StorageType As EntityRef(Of StorageType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStorageNumberChanging(value As String)
    End Sub
    Partial Private Sub OnStorageNumberChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnStorageTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStorageTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		Me._CapInstances = New EntitySet(Of CapInstance)(AddressOf Me.attach_CapInstances, AddressOf Me.detach_CapInstances)
		Me._StorageType = CType(Nothing, EntityRef(Of StorageType))
		OnCreated
	End Sub
	
	<Column(Storage:="_StorageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property StorageID() As Integer
		Get
			Return Me._StorageID
		End Get
	End Property
	
	<Column(Storage:="_StorageNumber", DbType:="NvarChar (10) NOT NULL", CanBeNull:=false)>  _
	Public Property StorageNumber() As String
		Get
			Return Me._StorageNumber
		End Get
		Set
			If (String.Equals(Me._StorageNumber, value) = false) Then
				Me.OnStorageNumberChanging(value)
				Me.SendPropertyChanging
				Me._StorageNumber = value
				Me.SendPropertyChanged("StorageNumber")
				Me.OnStorageNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StorageTypeID", DbType:="Int NOT NULL")>  _
	Public Property StorageTypeID() As Integer
		Get
			Return Me._StorageTypeID
		End Get
		Set
			If ((Me._StorageTypeID = value)  _
						= false) Then
				If Me._StorageType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnStorageTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._StorageTypeID = value
				Me.SendPropertyChanged("StorageTypeID")
				Me.OnStorageTypeIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Storage_Cap", Storage:="_Caps", ThisKey:="StorageID", OtherKey:="StorageID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Storage_CapInstance", Storage:="_CapInstances", ThisKey:="StorageID", OtherKey:="StorageID")>  _
	Public Property CapInstances() As EntitySet(Of CapInstance)
		Get
			Return Me._CapInstances
		End Get
		Set
			Me._CapInstances.Assign(value)
		End Set
	End Property
	
	<Association(Name:="StorageType_Storage", Storage:="_StorageType", ThisKey:="StorageTypeID", OtherKey:="StorageTypeID", IsForeignKey:=true)>  _
	Public Property StorageType() As StorageType
		Get
			Return Me._StorageType.Entity
		End Get
		Set
			Dim previousValue As StorageType = Me._StorageType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StorageType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StorageType.Entity = Nothing
					previousValue.Storages.Remove(Me)
				End If
				Me._StorageType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Storages.Add(Me)
					Me._StorageTypeID = value.StorageTypeID
				Else
					Me._StorageTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("StorageType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Storage = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Storage = Nothing
	End Sub
	
	Private Sub attach_CapInstances(ByVal entity As CapInstance)
		Me.SendPropertyChanging
		entity.Storage = Me
	End Sub
	
	Private Sub detach_CapInstances(ByVal entity As CapInstance)
		Me.SendPropertyChanging
		entity.Storage = Nothing
	End Sub
End Class

<Table(Name:="dbo.StorageType")>  _
Partial Public Class StorageType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StorageTypeID As Integer = CType(Nothing, Integer)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Storages As EntitySet(Of Storage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Storages = New EntitySet(Of Storage)(AddressOf Me.attach_Storages, AddressOf Me.detach_Storages)
		OnCreated
	End Sub
	
	<Column(Storage:="_StorageTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property StorageTypeID() As Integer
		Get
			Return Me._StorageTypeID
		End Get
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="StorageType_Storage", Storage:="_Storages", ThisKey:="StorageTypeID", OtherKey:="StorageTypeID")>  _
	Public Property Storages() As EntitySet(Of Storage)
		Get
			Return Me._Storages
		End Get
		Set
			Me._Storages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Storages(ByVal entity As Storage)
		Me.SendPropertyChanging
		entity.StorageType = Me
	End Sub
	
	Private Sub detach_Storages(ByVal entity As Storage)
		Me.SendPropertyChanging
		entity.StorageType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Cap")>  _
Partial Public Class Cap
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapID As Integer = CType(Nothing, Integer)
	
	Private _CapTypeID As System.Nullable(Of Integer)
	
	Private _MainTypeID As Integer
	
	Private _ShapeID As Integer
	
	Private _CapName As String
	
	Private _MainText As String
	
	Private _SubTitle As String
	
	Private _BackColor1 As Integer
	
	Private _BackColor2 As System.Nullable(Of Integer)
	
	Private _ForeColor As System.Nullable(Of Integer)
	
	Private _MainPicture As String
	
	Private _TopText As String
	
	Private _SideText As String
	
	Private _BottomText As String
	
	Private _MaterialID As Integer
	
	Private _Surface As Char
	
	Private _Size As Integer
	
	Private _Size2 As System.Nullable(Of Integer)
	
	Private _Height As Integer
	
	Private _Is3D As Boolean
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _CountryCode As String
	
	Private _DateCreated As System.Nullable(Of Date) = CType(Nothing, System.Nullable(Of Date))
	
	Private _Note As String
	
	Private _CompanyID As System.Nullable(Of Integer)
	
	Private _ProductID As System.Nullable(Of Integer)
	
	Private _ProductTypeID As System.Nullable(Of Integer)
	
	Private _StorageID As Integer
	
	Private _ForeColor2 As System.Nullable(Of Integer)
	
	Private _PictureType As System.Nullable(Of Char)
	
	Private _HasBottom As Boolean
	
	Private _HasSide As Boolean
	
	Private _AnotherPictures As String
	
	Private _CountryOfOrigin As String
	
	Private _TargetID As System.Nullable(Of Integer)
	
	Private _IsDrink As System.Nullable(Of Boolean)
	
	Private _State As Short
	
	Private _IsAlcoholic As System.Nullable(Of Boolean)
	
	Private _CapSignID As System.Nullable(Of Integer)
	
	Private _Cap_Category_Ints As EntitySet(Of Cap_Category_Int)
	
	Private _Cap_Keyword_Ints As EntitySet(Of Cap_Keyword_Int)
	
	Private _Images As EntitySet(Of Image)
	
	Private _CapInstances As EntitySet(Of CapInstance)
	
	Private _CapType As EntityRef(Of CapType)
	
	Private _Company As EntityRef(Of Company)
	
	Private _MainType As EntityRef(Of MainType)
	
	Private _Material As EntityRef(Of Material)
	
	Private _Product As EntityRef(Of Product)
	
	Private _ProductType As EntityRef(Of ProductType)
	
	Private _Storage As EntityRef(Of Storage)
	
	Private _Shape As EntityRef(Of Shape)
	
	Private _Target As EntityRef(Of Target)
	
	Private _CapSign As EntityRef(Of CapSign)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCapTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCapTypeIDChanged()
    End Sub
    Partial Private Sub OnMainTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMainTypeIDChanged()
    End Sub
    Partial Private Sub OnShapeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShapeIDChanged()
    End Sub
    Partial Private Sub OnCapNameChanging(value As String)
    End Sub
    Partial Private Sub OnCapNameChanged()
    End Sub
    Partial Private Sub OnMainTextChanging(value As String)
    End Sub
    Partial Private Sub OnMainTextChanged()
    End Sub
    Partial Private Sub OnSubTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSubTitleChanged()
    End Sub
    Partial Private Sub OnBackColor1Changing(value As Integer)
    End Sub
    Partial Private Sub OnBackColor1Changed()
    End Sub
    Partial Private Sub OnBackColor2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBackColor2Changed()
    End Sub
    Partial Private Sub OnForeColorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnForeColorChanged()
    End Sub
    Partial Private Sub OnMainPictureChanging(value As String)
    End Sub
    Partial Private Sub OnMainPictureChanged()
    End Sub
    Partial Private Sub OnTopTextChanging(value As String)
    End Sub
    Partial Private Sub OnTopTextChanged()
    End Sub
    Partial Private Sub OnSideTextChanging(value As String)
    End Sub
    Partial Private Sub OnSideTextChanged()
    End Sub
    Partial Private Sub OnBottomTextChanging(value As String)
    End Sub
    Partial Private Sub OnBottomTextChanged()
    End Sub
    Partial Private Sub OnMaterialIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaterialIDChanged()
    End Sub
    Partial Private Sub OnSurfaceChanging(value As Char)
    End Sub
    Partial Private Sub OnSurfaceChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    Partial Private Sub OnSize2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSize2Changed()
    End Sub
    Partial Private Sub OnHeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnIs3DChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs3DChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnCountryCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCountryCodeChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnCompanyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCompanyIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductTypeIDChanged()
    End Sub
    Partial Private Sub OnStorageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStorageIDChanged()
    End Sub
    Partial Private Sub OnForeColor2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnForeColor2Changed()
    End Sub
    Partial Private Sub OnPictureTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnPictureTypeChanged()
    End Sub
    Partial Private Sub OnHasBottomChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHasBottomChanged()
    End Sub
    Partial Private Sub OnHasSideChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHasSideChanged()
    End Sub
    Partial Private Sub OnAnotherPicturesChanging(value As String)
    End Sub
    Partial Private Sub OnAnotherPicturesChanged()
    End Sub
    Partial Private Sub OnCountryOfOriginChanging(value As String)
    End Sub
    Partial Private Sub OnCountryOfOriginChanged()
    End Sub
    Partial Private Sub OnTargetIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTargetIDChanged()
    End Sub
    Partial Private Sub OnIsDrinkChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDrinkChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As Short)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnIsAlcoholicChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlcoholicChanged()
    End Sub
    Partial Private Sub OnCapSignIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCapSignIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cap_Category_Ints = New EntitySet(Of Cap_Category_Int)(AddressOf Me.attach_Cap_Category_Ints, AddressOf Me.detach_Cap_Category_Ints)
		Me._Cap_Keyword_Ints = New EntitySet(Of Cap_Keyword_Int)(AddressOf Me.attach_Cap_Keyword_Ints, AddressOf Me.detach_Cap_Keyword_Ints)
		Me._Images = New EntitySet(Of Image)(AddressOf Me.attach_Images, AddressOf Me.detach_Images)
		Me._CapInstances = New EntitySet(Of CapInstance)(AddressOf Me.attach_CapInstances, AddressOf Me.detach_CapInstances)
		Me._CapType = CType(Nothing, EntityRef(Of CapType))
		Me._Company = CType(Nothing, EntityRef(Of Company))
		Me._MainType = CType(Nothing, EntityRef(Of MainType))
		Me._Material = CType(Nothing, EntityRef(Of Material))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		Me._ProductType = CType(Nothing, EntityRef(Of ProductType))
		Me._Storage = CType(Nothing, EntityRef(Of Storage))
		Me._Shape = CType(Nothing, EntityRef(Of Shape))
		Me._Target = CType(Nothing, EntityRef(Of Target))
		Me._CapSign = CType(Nothing, EntityRef(Of CapSign))
		OnCreated
	End Sub
	
	<Column(Storage:="_CapID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Overridable ReadOnly Property CapID() As Integer
		Get
			Return Me._CapID
		End Get
	End Property
	
	<Column(Storage:="_CapTypeID", DbType:="Int")>  _
	Public Overridable Property CapTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._CapTypeID
		End Get
		Set
			If (Me._CapTypeID.Equals(value) = false) Then
				If Me._CapType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCapTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._CapTypeID = value
				Me.SendPropertyChanged("CapTypeID")
				Me.OnCapTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MainTypeID", DbType:="Int NOT NULL")>  _
	Public Overridable Property MainTypeID() As Integer
		Get
			Return Me._MainTypeID
		End Get
		Set
			If ((Me._MainTypeID = value)  _
						= false) Then
				If Me._MainType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnMainTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MainTypeID = value
				Me.SendPropertyChanged("MainTypeID")
				Me.OnMainTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShapeID", DbType:="Int NOT NULL")>  _
	Public Overridable Property ShapeID() As Integer
		Get
			Return Me._ShapeID
		End Get
		Set
			If ((Me._ShapeID = value)  _
						= false) Then
				If Me._Shape.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnShapeIDChanging(value)
				Me.SendPropertyChanging
				Me._ShapeID = value
				Me.SendPropertyChanged("ShapeID")
				Me.OnShapeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CapName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Overridable Property CapName() As String
		Get
			Return Me._CapName
		End Get
		Set
			If (String.Equals(Me._CapName, value) = false) Then
				Me.OnCapNameChanging(value)
				Me.SendPropertyChanging
				Me._CapName = value
				Me.SendPropertyChanged("CapName")
				Me.OnCapNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MainText", DbType:="NVarChar(255)")>  _
	Public Overridable Property MainText() As String
		Get
			Return Me._MainText
		End Get
		Set
			If (String.Equals(Me._MainText, value) = false) Then
				Me.OnMainTextChanging(value)
				Me.SendPropertyChanging
				Me._MainText = value
				Me.SendPropertyChanged("MainText")
				Me.OnMainTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SubTitle", DbType:="NVarChar(255)")>  _
	Public Overridable Property SubTitle() As String
		Get
			Return Me._SubTitle
		End Get
		Set
			If (String.Equals(Me._SubTitle, value) = false) Then
				Me.OnSubTitleChanging(value)
				Me.SendPropertyChanging
				Me._SubTitle = value
				Me.SendPropertyChanged("SubTitle")
				Me.OnSubTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BackColor1", DbType:="Int NOT NULL")>  _
	Public Overridable Property BackColor1() As Integer
		Get
			Return Me._BackColor1
		End Get
		Set
			If ((Me._BackColor1 = value)  _
						= false) Then
				Me.OnBackColor1Changing(value)
				Me.SendPropertyChanging
				Me._BackColor1 = value
				Me.SendPropertyChanged("BackColor1")
				Me.OnBackColor1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_BackColor2", DbType:="Int")>  _
	Public Overridable Property BackColor2() As System.Nullable(Of Integer)
		Get
			Return Me._BackColor2
		End Get
		Set
			If (Me._BackColor2.Equals(value) = false) Then
				Me.OnBackColor2Changing(value)
				Me.SendPropertyChanging
				Me._BackColor2 = value
				Me.SendPropertyChanged("BackColor2")
				Me.OnBackColor2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ForeColor", DbType:="Int")>  _
	Public Overridable Property ForeColor() As System.Nullable(Of Integer)
		Get
			Return Me._ForeColor
		End Get
		Set
			If (Me._ForeColor.Equals(value) = false) Then
				Me.OnForeColorChanging(value)
				Me.SendPropertyChanging
				Me._ForeColor = value
				Me.SendPropertyChanged("ForeColor")
				Me.OnForeColorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MainPicture", DbType:="NVarChar(255)")>  _
	Public Overridable Property MainPicture() As String
		Get
			Return Me._MainPicture
		End Get
		Set
			If (String.Equals(Me._MainPicture, value) = false) Then
				Me.OnMainPictureChanging(value)
				Me.SendPropertyChanging
				Me._MainPicture = value
				Me.SendPropertyChanged("MainPicture")
				Me.OnMainPictureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TopText", DbType:="NVarChar(MAX)")>  _
	Public Overridable Property TopText() As String
		Get
			Return Me._TopText
		End Get
		Set
			If (String.Equals(Me._TopText, value) = false) Then
				Me.OnTopTextChanging(value)
				Me.SendPropertyChanging
				Me._TopText = value
				Me.SendPropertyChanged("TopText")
				Me.OnTopTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SideText", DbType:="NVarChar(MAX)")>  _
	Public Overridable Property SideText() As String
		Get
			Return Me._SideText
		End Get
		Set
			If (String.Equals(Me._SideText, value) = false) Then
				Me.OnSideTextChanging(value)
				Me.SendPropertyChanging
				Me._SideText = value
				Me.SendPropertyChanged("SideText")
				Me.OnSideTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BottomText", DbType:="NVarChar(MAX)")>  _
	Public Overridable Property BottomText() As String
		Get
			Return Me._BottomText
		End Get
		Set
			If (String.Equals(Me._BottomText, value) = false) Then
				Me.OnBottomTextChanging(value)
				Me.SendPropertyChanging
				Me._BottomText = value
				Me.SendPropertyChanged("BottomText")
				Me.OnBottomTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaterialID", DbType:="Int NOT NULL")>  _
	Public Overridable Property MaterialID() As Integer
		Get
			Return Me._MaterialID
		End Get
		Set
			If ((Me._MaterialID = value)  _
						= false) Then
				If Me._Material.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnMaterialIDChanging(value)
				Me.SendPropertyChanging
				Me._MaterialID = value
				Me.SendPropertyChanged("MaterialID")
				Me.OnMaterialIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Surface", DbType:="Char(1) NOT NULL")>  _
	Public Overridable Property Surface() As Char
		Get
			Return Me._Surface
		End Get
		Set
			If ((Me._Surface = value)  _
						= false) Then
				Me.OnSurfaceChanging(value)
				Me.SendPropertyChanging
				Me._Surface = value
				Me.SendPropertyChanged("Surface")
				Me.OnSurfaceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size", DbType:="Int NOT NULL")>  _
	Public Overridable Property Size() As Integer
		Get
			Return Me._Size
		End Get
		Set
			If ((Me._Size = value)  _
						= false) Then
				Me.OnSizeChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size")
				Me.OnSizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size2", DbType:="Int")>  _
	Public Overridable Property Size2() As System.Nullable(Of Integer)
		Get
			Return Me._Size2
		End Get
		Set
			If (Me._Size2.Equals(value) = false) Then
				Me.OnSize2Changing(value)
				Me.SendPropertyChanging
				Me._Size2 = value
				Me.SendPropertyChanged("Size2")
				Me.OnSize2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Height", DbType:="Int NOT NULL")>  _
	Public Overridable Property Height() As Integer
		Get
			Return Me._Height
		End Get
		Set
			If ((Me._Height = value)  _
						= false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Is3D", DbType:="Bit NOT NULL")>  _
	Public Overridable Property Is3D() As Boolean
		Get
			Return Me._Is3D
		End Get
		Set
			If ((Me._Is3D = value)  _
						= false) Then
				Me.OnIs3DChanging(value)
				Me.SendPropertyChanging
				Me._Is3D = value
				Me.SendPropertyChanged("Is3D")
				Me.OnIs3DChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Year", DbType:="Int")>  _
	Public Overridable Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CountryCode", DbType:="Char(2)")>  _
	Public Overridable Property CountryCode() As String
		Get
			Return Me._CountryCode
		End Get
		Set
			If (String.Equals(Me._CountryCode, value) = false) Then
				Me.OnCountryCodeChanging(value)
				Me.SendPropertyChanging
				Me._CountryCode = value
				Me.SendPropertyChanged("CountryCode")
				Me.OnCountryCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Overridable ReadOnly Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Overridable Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompanyID", DbType:="Int")>  _
	Public Overridable Property CompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._CompanyID
		End Get
		Set
			If (Me._CompanyID.Equals(value) = false) Then
				If Me._Company.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductID", DbType:="Int")>  _
	Public Overridable Property ProductID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductTypeID", DbType:="Int")>  _
	Public Overridable Property ProductTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductTypeID
		End Get
		Set
			If (Me._ProductTypeID.Equals(value) = false) Then
				If Me._ProductType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductTypeID = value
				Me.SendPropertyChanged("ProductTypeID")
				Me.OnProductTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StorageID", DbType:="Int NOT NULL")>  _
	Public Overridable Property StorageID() As Integer
		Get
			Return Me._StorageID
		End Get
		Set
			If ((Me._StorageID = value)  _
						= false) Then
				If Me._Storage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnStorageIDChanging(value)
				Me.SendPropertyChanging
				Me._StorageID = value
				Me.SendPropertyChanged("StorageID")
				Me.OnStorageIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ForeColor2", DbType:="Int")>  _
	Public Overridable Property ForeColor2() As System.Nullable(Of Integer)
		Get
			Return Me._ForeColor2
		End Get
		Set
			If (Me._ForeColor2.Equals(value) = false) Then
				Me.OnForeColor2Changing(value)
				Me.SendPropertyChanging
				Me._ForeColor2 = value
				Me.SendPropertyChanged("ForeColor2")
				Me.OnForeColor2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_PictureType", DbType:="Char(1)")>  _
	Public Overridable Property PictureType() As System.Nullable(Of Char)
		Get
			Return Me._PictureType
		End Get
		Set
			If (Me._PictureType.Equals(value) = false) Then
				Me.OnPictureTypeChanging(value)
				Me.SendPropertyChanging
				Me._PictureType = value
				Me.SendPropertyChanged("PictureType")
				Me.OnPictureTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HasBottom", DbType:="Bit NOT NULL")>  _
	Public Overridable Property HasBottom() As Boolean
		Get
			Return Me._HasBottom
		End Get
		Set
			If ((Me._HasBottom = value)  _
						= false) Then
				Me.OnHasBottomChanging(value)
				Me.SendPropertyChanging
				Me._HasBottom = value
				Me.SendPropertyChanged("HasBottom")
				Me.OnHasBottomChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HasSide", DbType:="Bit NOT NULL")>  _
	Public Overridable Property HasSide() As Boolean
		Get
			Return Me._HasSide
		End Get
		Set
			If ((Me._HasSide = value)  _
						= false) Then
				Me.OnHasSideChanging(value)
				Me.SendPropertyChanging
				Me._HasSide = value
				Me.SendPropertyChanged("HasSide")
				Me.OnHasSideChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnotherPictures", DbType:="NVarchar(MAX)")>  _
	Public Overridable Property AnotherPictures() As String
		Get
			Return Me._AnotherPictures
		End Get
		Set
			If (String.Equals(Me._AnotherPictures, value) = false) Then
				Me.OnAnotherPicturesChanging(value)
				Me.SendPropertyChanging
				Me._AnotherPictures = value
				Me.SendPropertyChanged("AnotherPictures")
				Me.OnAnotherPicturesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CountryOfOrigin", DbType:="Char(2)")>  _
	Public Overridable Property CountryOfOrigin() As String
		Get
			Return Me._CountryOfOrigin
		End Get
		Set
			If (String.Equals(Me._CountryOfOrigin, value) = false) Then
				Me.OnCountryOfOriginChanging(value)
				Me.SendPropertyChanging
				Me._CountryOfOrigin = value
				Me.SendPropertyChanged("CountryOfOrigin")
				Me.OnCountryOfOriginChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TargetID", DbType:="Int")>  _
	Public Overridable Property TargetID() As System.Nullable(Of Integer)
		Get
			Return Me._TargetID
		End Get
		Set
			If (Me._TargetID.Equals(value) = false) Then
				If Me._Target.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnTargetIDChanging(value)
				Me.SendPropertyChanging
				Me._TargetID = value
				Me.SendPropertyChanged("TargetID")
				Me.OnTargetIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsDrink", DbType:="Bit")>  _
	Public Overridable Property IsDrink() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDrink
		End Get
		Set
			If (Me._IsDrink.Equals(value) = false) Then
				Me.OnIsDrinkChanging(value)
				Me.SendPropertyChanging
				Me._IsDrink = value
				Me.SendPropertyChanged("IsDrink")
				Me.OnIsDrinkChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_State", DbType:="SmallInt NOT NULL")>  _
	Public Overridable Property State() As Short
		Get
			Return Me._State
		End Get
		Set
			If ((Me._State = value)  _
						= false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsAlcoholic", DbType:="Bit")>  _
	Public Overridable Property IsAlcoholic() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlcoholic
		End Get
		Set
			If (Me._IsAlcoholic.Equals(value) = false) Then
				Me.OnIsAlcoholicChanging(value)
				Me.SendPropertyChanging
				Me._IsAlcoholic = value
				Me.SendPropertyChanged("IsAlcoholic")
				Me.OnIsAlcoholicChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CapSignID", DbType:="Int")>  _
	Public Overridable Property CapSignID() As System.Nullable(Of Integer)
		Get
			Return Me._CapSignID
		End Get
		Set
			If (Me._CapSignID.Equals(value) = false) Then
				If Me._CapSign.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCapSignIDChanging(value)
				Me.SendPropertyChanging
				Me._CapSignID = value
				Me.SendPropertyChanged("CapSignID")
				Me.OnCapSignIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Cap_Cap_Category_Int", Storage:="_Cap_Category_Ints", ThisKey:="CapID", OtherKey:="CapID")>  _
	Public Property Cap_Category_Ints() As EntitySet(Of Cap_Category_Int)
		Get
			Return Me._Cap_Category_Ints
		End Get
		Set
			Me._Cap_Category_Ints.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Cap_Cap_Keyword_Int", Storage:="_Cap_Keyword_Ints", ThisKey:="CapID", OtherKey:="CapID")>  _
	Public Property Cap_Keyword_Ints() As EntitySet(Of Cap_Keyword_Int)
		Get
			Return Me._Cap_Keyword_Ints
		End Get
		Set
			Me._Cap_Keyword_Ints.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Cap_Image", Storage:="_Images", ThisKey:="CapID", OtherKey:="CapID")>  _
	Public Property Images() As EntitySet(Of Image)
		Get
			Return Me._Images
		End Get
		Set
			Me._Images.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Cap_CapInstance", Storage:="_CapInstances", ThisKey:="CapID", OtherKey:="CapID")>  _
	Public Property CapInstances() As EntitySet(Of CapInstance)
		Get
			Return Me._CapInstances
		End Get
		Set
			Me._CapInstances.Assign(value)
		End Set
	End Property
	
	<Association(Name:="CapType_Cap", Storage:="_CapType", ThisKey:="CapTypeID", OtherKey:="CapTypeID", IsForeignKey:=true)>  _
	Public Property CapType() As CapType
		Get
			Return Me._CapType.Entity
		End Get
		Set
			Dim previousValue As CapType = Me._CapType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CapType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CapType.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._CapType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._CapTypeID = value.CapTypeID
				Else
					Me._CapTypeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CapType")
			End If
		End Set
	End Property
	
	<Association(Name:="Company_Cap", Storage:="_Company", ThisKey:="CompanyID", OtherKey:="CompanyID", IsForeignKey:=true)>  _
	Public Property Company() As Company
		Get
			Return Me._Company.Entity
		End Get
		Set
			Dim previousValue As Company = Me._Company.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Company.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Company.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Company.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._CompanyID = value.CompanyID
				Else
					Me._CompanyID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Company")
			End If
		End Set
	End Property
	
	<Association(Name:="MainType_Cap", Storage:="_MainType", ThisKey:="MainTypeID", OtherKey:="MainTypeID", IsForeignKey:=true)>  _
	Public Property MainType() As MainType
		Get
			Return Me._MainType.Entity
		End Get
		Set
			Dim previousValue As MainType = Me._MainType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MainType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MainType.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._MainType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._MainTypeID = value.MainTypeID
				Else
					Me._MainTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MainType")
			End If
		End Set
	End Property
	
	<Association(Name:="Material_Cap", Storage:="_Material", ThisKey:="MaterialID", OtherKey:="MaterialID", IsForeignKey:=true)>  _
	Public Property Material() As Material
		Get
			Return Me._Material.Entity
		End Get
		Set
			Dim previousValue As Material = Me._Material.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Material.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Material.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Material.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._MaterialID = value.MaterialID
				Else
					Me._MaterialID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Material")
			End If
		End Set
	End Property
	
	<Association(Name:="Product_Cap", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	<Association(Name:="ProductType_Cap", Storage:="_ProductType", ThisKey:="ProductTypeID", OtherKey:="ProductTypeID", IsForeignKey:=true)>  _
	Public Property ProductType() As ProductType
		Get
			Return Me._ProductType.Entity
		End Get
		Set
			Dim previousValue As ProductType = Me._ProductType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductType.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._ProductType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._ProductTypeID = value.ProductTypeID
				Else
					Me._ProductTypeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProductType")
			End If
		End Set
	End Property
	
	<Association(Name:="Storage_Cap", Storage:="_Storage", ThisKey:="StorageID", OtherKey:="StorageID", IsForeignKey:=true)>  _
	Public Property Storage() As Storage
		Get
			Return Me._Storage.Entity
		End Get
		Set
			Dim previousValue As Storage = Me._Storage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Storage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Storage.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Storage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._StorageID = value.StorageID
				Else
					Me._StorageID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Storage")
			End If
		End Set
	End Property
	
	<Association(Name:="Shape_Cap", Storage:="_Shape", ThisKey:="ShapeID", OtherKey:="ShapeID", IsForeignKey:=true)>  _
	Public Property Shape() As Shape
		Get
			Return Me._Shape.Entity
		End Get
		Set
			Dim previousValue As Shape = Me._Shape.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Shape.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Shape.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Shape.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._ShapeID = value.ShapeID
				Else
					Me._ShapeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Shape")
			End If
		End Set
	End Property
	
	<Association(Name:="Target_Cap", Storage:="_Target", ThisKey:="TargetID", OtherKey:="TargetID", IsForeignKey:=true)>  _
	Public Property Target() As Target
		Get
			Return Me._Target.Entity
		End Get
		Set
			Dim previousValue As Target = Me._Target.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Target.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Target.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._Target.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._TargetID = value.TargetID
				Else
					Me._TargetID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Target")
			End If
		End Set
	End Property
	
	<Association(Name:="CapSign_Cap", Storage:="_CapSign", ThisKey:="CapSignID", OtherKey:="CapSignId", IsForeignKey:=true)>  _
	Public Property CapSign() As CapSign
		Get
			Return Me._CapSign.Entity
		End Get
		Set
			Dim previousValue As CapSign = Me._CapSign.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CapSign.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CapSign.Entity = Nothing
					previousValue.Caps.Remove(Me)
				End If
				Me._CapSign.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Caps.Add(Me)
					Me._CapSignID = value.CapSignId
				Else
					Me._CapSignID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CapSign")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cap_Category_Ints(ByVal entity As Cap_Category_Int)
		Me.SendPropertyChanging
		entity.Cap = Me
	End Sub
	
	Private Sub detach_Cap_Category_Ints(ByVal entity As Cap_Category_Int)
		Me.SendPropertyChanging
		entity.Cap = Nothing
	End Sub
	
	Private Sub attach_Cap_Keyword_Ints(ByVal entity As Cap_Keyword_Int)
		Me.SendPropertyChanging
		entity.Cap = Me
	End Sub
	
	Private Sub detach_Cap_Keyword_Ints(ByVal entity As Cap_Keyword_Int)
		Me.SendPropertyChanging
		entity.Cap = Nothing
	End Sub
	
	Private Sub attach_Images(ByVal entity As Image)
		Me.SendPropertyChanging
		entity.Cap = Me
	End Sub
	
	Private Sub detach_Images(ByVal entity As Image)
		Me.SendPropertyChanging
		entity.Cap = Nothing
	End Sub
	
	Private Sub attach_CapInstances(ByVal entity As CapInstance)
		Me.SendPropertyChanging
		entity.Cap = Me
	End Sub
	
	Private Sub detach_CapInstances(ByVal entity As CapInstance)
		Me.SendPropertyChanging
		entity.Cap = Nothing
	End Sub
End Class

<Table(Name:="dbo.Shape")>  _
Partial Public Class Shape
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ShapeID As Integer = CType(Nothing, Integer)
	
	Private _Name As String
	
	Private _Size1Name As String
	
	Private _Size2Name As String
	
	Private _Description As String
	
	Private _CapTypes As EntitySet(Of CapType)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSize1NameChanging(value As String)
    End Sub
    Partial Private Sub OnSize1NameChanged()
    End Sub
    Partial Private Sub OnSize2NameChanging(value As String)
    End Sub
    Partial Private Sub OnSize2NameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CapTypes = New EntitySet(Of CapType)(AddressOf Me.attach_CapTypes, AddressOf Me.detach_CapTypes)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_ShapeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property ShapeID() As Integer
		Get
			Return Me._ShapeID
		End Get
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size1Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Size1Name() As String
		Get
			Return Me._Size1Name
		End Get
		Set
			If (String.Equals(Me._Size1Name, value) = false) Then
				Me.OnSize1NameChanging(value)
				Me.SendPropertyChanging
				Me._Size1Name = value
				Me.SendPropertyChanged("Size1Name")
				Me.OnSize1NameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size2Name", DbType:="NVarChar(50)")>  _
	Public Property Size2Name() As String
		Get
			Return Me._Size2Name
		End Get
		Set
			If (String.Equals(Me._Size2Name, value) = false) Then
				Me.OnSize2NameChanging(value)
				Me.SendPropertyChanging
				Me._Size2Name = value
				Me.SendPropertyChanged("Size2Name")
				Me.OnSize2NameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Shape_CapType", Storage:="_CapTypes", ThisKey:="ShapeID", OtherKey:="ShapeID")>  _
	Public Property CapTypes() As EntitySet(Of CapType)
		Get
			Return Me._CapTypes
		End Get
		Set
			Me._CapTypes.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Shape_Cap", Storage:="_Caps", ThisKey:="ShapeID", OtherKey:="ShapeID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Shape = Me
	End Sub
	
	Private Sub detach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Shape = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Shape = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Shape = Nothing
	End Sub
End Class

<Table(Name:="dbo.Image")>  _
Partial Public Class Image
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageID As Integer = CType(Nothing, Integer)
	
	Private _RelativePath As String
	
	Private _CapID As Integer
	
	Private _IsMain As Boolean
	
	Private _Cap As EntityRef(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRelativePathChanging(value As String)
    End Sub
    Partial Private Sub OnRelativePathChanged()
    End Sub
    Partial Private Sub OnCapIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCapIDChanged()
    End Sub
    Partial Private Sub OnIsMainChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMainChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cap = CType(Nothing, EntityRef(Of Cap))
		OnCreated
	End Sub
	
	<Column(Storage:="_ImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
	End Property
	
	<Column(Storage:="_RelativePath", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RelativePath() As String
		Get
			Return Me._RelativePath
		End Get
		Set
			If (String.Equals(Me._RelativePath, value) = false) Then
				Me.OnRelativePathChanging(value)
				Me.SendPropertyChanging
				Me._RelativePath = value
				Me.SendPropertyChanged("RelativePath")
				Me.OnRelativePathChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CapID", DbType:="Int NOT NULL")>  _
	Public Property CapID() As Integer
		Get
			Return Me._CapID
		End Get
		Set
			If ((Me._CapID = value)  _
						= false) Then
				If Me._Cap.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCapIDChanging(value)
				Me.SendPropertyChanging
				Me._CapID = value
				Me.SendPropertyChanged("CapID")
				Me.OnCapIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsMain", DbType:="Bit NOT NULL")>  _
	Public Property IsMain() As Boolean
		Get
			Return Me._IsMain
		End Get
		Set
			If ((Me._IsMain = value)  _
						= false) Then
				Me.OnIsMainChanging(value)
				Me.SendPropertyChanging
				Me._IsMain = value
				Me.SendPropertyChanged("IsMain")
				Me.OnIsMainChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Cap_Image", Storage:="_Cap", ThisKey:="CapID", OtherKey:="CapID", IsForeignKey:=true)>  _
	Public Property Cap() As Cap
		Get
			Return Me._Cap.Entity
		End Get
		Set
			Dim previousValue As Cap = Me._Cap.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cap.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cap.Entity = Nothing
					previousValue.Images.Remove(Me)
				End If
				Me._Cap.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Images.Add(Me)
					Me._CapID = value.CapID
				Else
					Me._CapID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cap")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Target")>  _
Partial Public Class Target
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TargetID As Integer = CType(Nothing, Integer)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _CapTypes As EntitySet(Of CapType)
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CapTypes = New EntitySet(Of CapType)(AddressOf Me.attach_CapTypes, AddressOf Me.detach_CapTypes)
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_TargetID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property TargetID() As Integer
		Get
			Return Me._TargetID
		End Get
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Target_CapType", Storage:="_CapTypes", ThisKey:="TargetID", OtherKey:="TargetID")>  _
	Public Property CapTypes() As EntitySet(Of CapType)
		Get
			Return Me._CapTypes
		End Get
		Set
			Me._CapTypes.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Target_Cap", Storage:="_Caps", ThisKey:="TargetID", OtherKey:="TargetID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Target = Me
	End Sub
	
	Private Sub detach_CapTypes(ByVal entity As CapType)
		Me.SendPropertyChanging
		entity.Target = Nothing
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Target = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.Target = Nothing
	End Sub
End Class

<Table(Name:="dbo.CapInstance")>  _
Partial Public Class CapInstance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapInstanceID As Integer = CType(Nothing, Integer)
	
	Private _CapID As Integer = CType(Nothing, Integer)
	
	Private _StorageID As Integer
	
	Private _State As Short
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _CountryCode As String
	
	Private _DateCreated As Date = CType(Nothing, Date)
	
	Private _Note As String
	
	Private _Cap As EntityRef(Of Cap)
	
	Private _Storage As EntityRef(Of Storage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStorageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStorageIDChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As Short)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnCountryCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCountryCodeChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cap = CType(Nothing, EntityRef(Of Cap))
		Me._Storage = CType(Nothing, EntityRef(Of Storage))
		OnCreated
	End Sub
	
	<Column(Storage:="_CapInstanceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CapInstanceID() As Integer
		Get
			Return Me._CapInstanceID
		End Get
	End Property
	
	<Column(Storage:="_CapID", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property CapID() As Integer
		Get
			Return Me._CapID
		End Get
	End Property
	
	<Column(Storage:="_StorageID", DbType:="Int NOT NULL")>  _
	Public Property StorageID() As Integer
		Get
			Return Me._StorageID
		End Get
		Set
			If ((Me._StorageID = value)  _
						= false) Then
				If Me._Storage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnStorageIDChanging(value)
				Me.SendPropertyChanging
				Me._StorageID = value
				Me.SendPropertyChanged("StorageID")
				Me.OnStorageIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_State", DbType:="SmallInt NOT NULL")>  _
	Public Property State() As Short
		Get
			Return Me._State
		End Get
		Set
			If ((Me._State = value)  _
						= false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CountryCode", DbType:="Char(2)")>  _
	Public Property CountryCode() As String
		Get
			Return Me._CountryCode
		End Get
		Set
			If (String.Equals(Me._CountryCode, value) = false) Then
				Me.OnCountryCodeChanging(value)
				Me.SendPropertyChanging
				Me._CountryCode = value
				Me.SendPropertyChanged("CountryCode")
				Me.OnCountryCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
	End Property
	
	<Column(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Cap_CapInstance", Storage:="_Cap", ThisKey:="CapID", OtherKey:="CapID", IsForeignKey:=true)>  _
	Public Property Cap() As Cap
		Get
			Return Me._Cap.Entity
		End Get
		Set
			Dim previousValue As Cap = Me._Cap.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cap.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cap.Entity = Nothing
					previousValue.CapInstances.Remove(Me)
				End If
				Me._Cap.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapInstances.Add(Me)
					Me._CapID = value.CapID
				Else
					Me._CapID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cap")
			End If
		End Set
	End Property
	
	<Association(Name:="Storage_CapInstance", Storage:="_Storage", ThisKey:="StorageID", OtherKey:="StorageID", IsForeignKey:=true)>  _
	Public Property Storage() As Storage
		Get
			Return Me._Storage.Entity
		End Get
		Set
			Dim previousValue As Storage = Me._Storage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Storage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Storage.Entity = Nothing
					previousValue.CapInstances.Remove(Me)
				End If
				Me._Storage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CapInstances.Add(Me)
					Me._StorageID = value.StorageID
				Else
					Me._StorageID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Storage")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.[ISO 3166-1]")>  _
Partial Public Class ISO_3166_1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Alpha_2 As String
	
	Private _Alpha_3 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlpha_2Changing(value As String)
    End Sub
    Partial Private Sub OnAlpha_2Changed()
    End Sub
    Partial Private Sub OnAlpha_3Changing(value As String)
    End Sub
    Partial Private Sub OnAlpha_3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[Alpha-2]", Storage:="_Alpha_2", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Alpha_2() As String
		Get
			Return Me._Alpha_2
		End Get
		Set
			If (String.Equals(Me._Alpha_2, value) = false) Then
				Me.OnAlpha_2Changing(value)
				Me.SendPropertyChanging
				Me._Alpha_2 = value
				Me.SendPropertyChanged("Alpha_2")
				Me.OnAlpha_2Changed
			End If
		End Set
	End Property
	
	<Column(Name:="[Alpha-3]", Storage:="_Alpha_3", DbType:="Char(3) NOT NULL", CanBeNull:=false)>  _
	Public Property Alpha_3() As String
		Get
			Return Me._Alpha_3
		End Get
		Set
			If (String.Equals(Me._Alpha_3, value) = false) Then
				Me.OnAlpha_3Changing(value)
				Me.SendPropertyChanging
				Me._Alpha_3 = value
				Me.SendPropertyChanged("Alpha_3")
				Me.OnAlpha_3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CapSign")>  _
Partial Public Class CapSign
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CapSignId As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Caps As EntitySet(Of Cap)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCapSignIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCapSignIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caps = New EntitySet(Of Cap)(AddressOf Me.attach_Caps, AddressOf Me.detach_Caps)
		OnCreated
	End Sub
	
	<Column(Storage:="_CapSignId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CapSignId() As Integer
		Get
			Return Me._CapSignId
		End Get
		Set
			If ((Me._CapSignId = value)  _
						= false) Then
				Me.OnCapSignIdChanging(value)
				Me.SendPropertyChanging
				Me._CapSignId = value
				Me.SendPropertyChanged("CapSignId")
				Me.OnCapSignIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CapSign_Cap", Storage:="_Caps", ThisKey:="CapSignId", OtherKey:="CapSignID")>  _
	Public Property Caps() As EntitySet(Of Cap)
		Get
			Return Me._Caps
		End Get
		Set
			Me._Caps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.CapSign = Me
	End Sub
	
	Private Sub detach_Caps(ByVal entity As Cap)
		Me.SendPropertyChanging
		entity.CapSign = Nothing
	End Sub
End Class
